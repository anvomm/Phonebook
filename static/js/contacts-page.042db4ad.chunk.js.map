{"version":3,"file":"static/js/contacts-page.042db4ad.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm.jsx","components/Filter.jsx","redux/filter/filter-selectors.js","components/Contact.jsx","components/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { notifyAboutSuccess } from 'utils/notifications';\nimport {\n  Flex,\n  Button,\n  Input,\n  FormControl,\n  FormLabel,\n  useToast,\n} from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const toast = useToast();\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const inputHandler = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const isExist = contacts.find(\n      contacts => contacts.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExist) {\n      toast({\n        title: `${name} is already in contacts.`,\n        status: 'error',\n        position: 'top',\n        duration: 5000,\n        isClosable: true,\n      });\n      resetForm();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    notifyAboutSuccess(\n      `${name} is successfully added to your contacts.`\n    );\n    resetForm();\n  };\n\n  return (\n    <Flex\n      as={'form'}\n      flexDirection={['column', 'column', 'row']}\n      align={'center'}\n      justify={'center'}\n      gap={'40px'}\n      mb=\"50px\"\n      onSubmit={submitHandler}\n    >\n      <FormControl w={'300px'} isRequired>\n        <FormLabel\n          display={'flex'}\n          gap={'10px'}\n          alignItems={'center'}\n          color={'#6B6B6B'}\n          fontSize={['14px', '14px', '14px', '16px', '18px']}\n        >\n          Name\n          <Input\n            variant=\"flushed\"\n            borderColor=\"#613975\"\n            autoComplete=\"off\"\n            focusBorderColor=\"#FC0A7E\"\n            fontSize={['14px', '14px', '14px', '16px', '18px']}\n            pl=\"10px\"\n            type=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={inputHandler}\n          />\n        </FormLabel>\n      </FormControl>\n      <FormControl w={'300px'} isRequired>\n        <FormLabel\n          display={'flex'}\n          gap={'10px'}\n          alignItems={'center'}\n          color={'#6B6B6B'}\n          fontSize={['14px', '14px', '14px', '16px', '18px']}\n        >\n          Number\n          <Input\n            variant=\"flushed\"\n            borderColor=\"#613975\"\n            focusBorderColor=\"#FC0A7E\"\n            fontSize={['14px', '14px', '14px', '16px', '18px']}\n            pl=\"10px\"\n            autoComplete=\"off\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={inputHandler}\n            required\n          />\n        </FormLabel>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        variant={'pinkButton'}\n        _hover={{\n          bgColor: 'transparent',\n          border: '1px solid #B04BB3',\n          color: '#B04BB3',\n        }}\n      >\n        Add contact\n      </Button>\n    </Flex>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilterValue } from 'redux/filter/filterSlice';\nimport { Input, Flex } from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Flex align={'center'} justify={'flex-end'} mb=\"20px\">\n      <Input\n        variant=\"flushed\"\n        borderColor=\"#613975\"\n        autoComplete=\"off\"\n        focusBorderColor=\"#FC0A7E\"\n        w=\"200px\"\n        pl=\"15px\"\n        type=\"text\"\n        placeholder=\"Find contact by name\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={e => dispatch(setFilterValue(e.target.value))}\n      />\n      <SearchIcon color=\"#FC0A7E\" w=\"20px\" h=\"20px\" />\n    </Flex>\n  );\n};\n","export const selectFilter = state => state.filter.filter;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, addContact } from 'redux/contacts/contacts-operations';\nimport { useRef } from 'react';\nimport Countdown from 'react-countdown';\nimport {\n  IconButton,\n  Link,\n  Text,\n  Tooltip,\n  useToast,\n  Alert,\n  AlertTitle,\n  AlertDescription,\n  Button,\n} from '@chakra-ui/react';\nimport { PhoneIcon, DeleteIcon } from '@chakra-ui/icons';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const toastIdRef = useRef();\n  let deleteIsPressed = false;\n\n  const close = () => {\n    if (toastIdRef.current) {\n      toast.close(toastIdRef.current);\n    }\n  };\n\n  const addToast = () => {\n    toastIdRef.current = toast({\n      duration: null,\n      position: 'bottom-right',\n      render: () => (\n        <Alert\n          variant=\"subtle\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          textAlign=\"center\"\n          height=\"200px\"\n          bgColor={'#ff96cb'}\n        >\n          <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n            {name} is deleted from your contacts.{' '}\n          </AlertTitle>\n          <AlertDescription mb=\"10px\">\n            You have\n            {deleteIsPressed && <Countdown\n              date={Date.now() + 15000}\n              intervalDelay={1000}\n              precision={1}\n              renderer={props => {\n                if (props.seconds === 0) {deleteIsPressed = false; close()};\n                return <div>{props.seconds}</div>;\n              }}\n            />}\n            seconds to undo this action\n          </AlertDescription>\n\n          <Button\n            variant={'pinkButton'}\n            _hover={{\n              bgColor: 'transparent',\n              border: '1px solid #B04BB3',\n              color: '#B04BB3',\n            }}\n            onClick={() => {\n              dispatch(addContact({ name, number }));\n              deleteIsPressed = false;\n              close();\n            }}\n          >\n            Undo\n          </Button>\n        </Alert>\n      ),\n    });\n  };\n\n  return (\n    <>\n      <Tooltip label=\"Make a call\" bg=\"#613975\">\n        <Link href={`tel:${number}`}>\n          <PhoneIcon\n            color=\"#CF0063\"\n            _hover={{ color: '#613975', transform: 'scale(1.4)' }}\n          />\n        </Link>\n      </Tooltip>\n      <Text color={'#613975'} fontSize={['16px', '16px', '18px']}>\n        {name}\n      </Text>\n      <Text color={'#613975'} fontSize={['16px', '16px', '18px']}>\n        {number}\n      </Text>\n      <Tooltip label=\"Delete\" bg=\"#613975\">\n        <IconButton\n          color=\"#CF0063\"\n          bgColor={'transparent'}\n          _hover={{ bgColor: 'transparent', color: '#613975' }}\n          aria-label=\"Delete contact\"\n          size=\"lg\"\n          icon={<DeleteIcon />}\n          onClick={() => {\n            dispatch(deleteContact({ id, name }));\n            deleteIsPressed = true;\n            addToast();\n          }}\n        />\n      </Tooltip>\n    </>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/contacts-selectors';\nimport { selectFilter } from 'redux/filter/filter-selectors';\nimport { Contact } from 'components/Contact';\nimport { List, ListItem, Text, Spinner } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter)\n  );\n\n  const getRandomColor = () => {\n    const color = 'hsl(' + Math.random() * 360 + ', 100%, 75%)';\n    return color;\n  };\n\n  return contacts.length === 0 && isLoading ? (\n    <Spinner\n      thickness=\"4px\"\n      emptyColor=\"gray.200\"\n      color=\"#FC0A7E\"\n      size=\"xl\"\n      position={'absolute'}\n      top=\"50%\"\n      left=\"50%\"\n      transform=\"translate(-50%, -50%)\"\n    />\n  ) : contacts.length !== 0 && filteredContacts.length !== 0 ? (\n    <List\n      display={'flex'}\n      flexWrap={'wrap'}\n      gap={'20px'}\n      mb={'80px'}\n      justifyContent=\"center\"\n    >\n      {filteredContacts\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map(({ name, number, id }) => (\n          <ListItem\n            key={id}\n            minW={'350px'}\n            display={'flex'}\n            alignItems={'center'}\n            justifyContent={'space-between'}\n            gap=\"8px\"\n            pr=\"10px\"\n            pl=\"20px\"\n            py=\"10px\"\n            bgColor={getRandomColor}\n            border=\"1px solid #FC0A7E\"\n            borderRadius=\"8px\"\n            cursor=\"pointer\"\n            _hover={{\n              transform: 'scale(1.1) translate(0, -10px)',\n              shadow: 'dark-lg',\n            }}\n          >\n            <Contact name={name} number={number} id={id}></Contact>\n          </ListItem>\n        ))}\n    </List>\n  ) : contacts.length === 0 ? (\n    <Text\n      textAlign={'center'}\n      color={'#613975'}\n      fontSize={['15px', '16px', '18px', '20px']}\n    >\n      Unfortunately your contacts list is empty\n    </Text>\n  ) : (\n    <Text\n      textAlign={'center'}\n      color={'#613975'}\n      fontSize={['15px', '16px', '18px', '20px']}\n    >\n      Your list does not contain the contact named {' '}\n      <Text\n        as={'span'}\n        color={'#FC0A7E'}\n        fontSize={['15px', '16px', '18px', '20px']}\n        fontWeight='500'\n      >\n           {filter}\n      </Text>\n    </Text>\n  );\n};\n","import { Box, Text } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\n\nconst ContactsPage = () => (\n  <Box w={['300px', '440px', '750px', '970px', '1200px']} mx=\"auto\" pt=\"30px\">\n    <Filter />\n    <Text\n      color={'#613975'}\n      fontSize={['18px', '18px', '20px', '22px', '24px']}\n      mb={'35px'}\n    >\n      Add new contact:\n    </Text>\n    <ContactForm />\n    <ContactList />\n  </Box>\n);\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","toast","useToast","resetForm","inputHandler","e","target","value","as","flexDirection","align","justify","gap","mb","onSubmit","preventDefault","isExist","find","toLowerCase","title","status","position","duration","isClosable","addContact","notifyAboutSuccess","w","isRequired","display","alignItems","color","fontSize","I","variant","borderColor","autoComplete","focusBorderColor","pl","type","onChange","pattern","required","_hover","bgColor","border","Filter","placeholder","setFilterValue","h","selectFilter","filter","Contact","id","toastIdRef","useRef","deleteIsPressed","close","current","label","bg","href","transform","size","icon","onClick","deleteContact","render","justifyContent","textAlign","height","mt","date","Date","now","intervalDelay","precision","renderer","props","seconds","ContactList","useEffect","fetchContacts","filteredContacts","includes","getRandomColor","Math","random","length","thickness","emptyColor","top","left","flexWrap","sort","a","b","localeCompare","map","minW","pr","py","borderRadius","cursor","shadow","fontWeight","mx","pt"],"sourceRoot":""}