{"version":3,"file":"static/js/register-page.0c5f1f02.chunk.js","mappings":"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","sources":["components/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/toast/dist/chunk-BXBGUOGI.mjs"],"sourcesContent":["import { Input } from '@chakra-ui/react';\nimport {\n  Flex,\n  IconButton,\n  FormControl,\n  FormLabel,\n  InputGroup,\n  Button,\n  InputRightElement,\n  FormHelperText,\n  useToast,\n} from '@chakra-ui/react';\nimport { ViewOffIcon, ViewIcon } from '@chakra-ui/icons';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/auth-operations';\n\nexport const RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n\n  const resetForm = () => {\n    setEmail('');\n    setName('');\n    setPassword('');\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const confirmPassword = e.target.elements.passwordRepeat.value;\n    if (confirmPassword !== password) {\n      toast({\n        title: \"Your passwords aren't equal.\",\n        description: 'Please try one more time',\n        status: 'error',\n        position: 'top-right',\n        duration: 5000,\n        isClosable: true,\n      });\n      e.target.reset();\n      setPassword('');\n      return;\n    }\n    dispatch(registerUser({ name, email, password }));\n    toast({\n      title: 'Welcome!',\n      description: 'Your account is created',\n      status: 'success',\n      position: 'top-right',\n      duration: 5000,\n      isClosable: true,\n    });\n    e.target.reset();\n    resetForm();\n  };\n\n  return (\n    <Flex\n      as=\"form\"\n      flexDirection={'column'}\n      gap={'50px'}\n      bgGradient=\"linear(to-t, #450E4B 0%, #3C0C41 24.48%, rgba(207, 0, 99, 0) 100%)\"\n      bgColor={'#CF0063'}\n      borderRadius={'8px'}\n      p={'40px'}\n      mx={'auto'}\n      mb={'120px'}\n      w={['280px', '400px', '450px', '500px']}\n      position=\"relative\"\n      zIndex={'1000'}\n      onSubmit={handleSubmit}\n    >\n      <Flex flexDirection={'column'} align={'center'} gap={'20px'}>\n        <FormControl isRequired>\n          <FormLabel color={'#fff'}>Name</FormLabel>\n          <Input\n            type=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={handleInputChange}\n            placeholder=\"Enter your name or nikname\"\n            _placeholder={{\n              color: '#000',\n              fontSize: ['12px', '13px', '14px', '15px', '16px'],\n            }}\n            variant={'styled'}\n          />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel color={'#fff'}>Email</FormLabel>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            variant={'styled'}\n            placeholder=\"Enter the email you'd like to use as login\"\n            _placeholder={{\n              color: '#000',\n              fontSize: ['12px', '13px', '14px', '15px', '16px'],\n            }}\n          />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel color={'#fff'}>Password</FormLabel>\n          <InputGroup>\n            <Input\n              name=\"password\"\n              value={password}\n              pr=\"4.5rem\"\n              type={show ? 'text' : 'password'}\n              placeholder=\"Enter password\"\n              _placeholder={{\n                color: '#000',\n                fontSize: ['12px', '13px', '14px', '15px', '16px'],\n              }}\n              onChange={handleInputChange}\n              variant={'styled'}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <IconButton\n                h=\"1.75rem\"\n                size=\"sm\"\n                onClick={handleClick}\n                icon={\n                  show ? (\n                    <ViewOffIcon color=\"#CF0063\" />\n                  ) : (\n                    <ViewIcon color=\"#CF0063\" />\n                  )\n                }\n              ></IconButton>\n            </InputRightElement>\n          </InputGroup>\n          <FormHelperText color={'#fff'}>\n            Your password should contain at least 7 symbols.\n          </FormHelperText>\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel color={'#fff'}>Password</FormLabel>\n          <InputGroup>\n            <Input\n              variant={'styled'}\n              name=\"passwordRepeat\"\n              pr=\"4.5rem\"\n              type={show ? 'text' : 'password'}\n              placeholder=\"Repeat password\"\n              _placeholder={{\n                color: '#000',\n                fontSize: ['12px', '13px', '14px', '15px', '16px'],\n              }}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <IconButton\n                h=\"1.75rem\"\n                size=\"sm\"\n                onClick={handleClick}\n                icon={\n                  show ? (\n                    <ViewOffIcon color=\"#CF0063\" />\n                  ) : (\n                    <ViewIcon color=\"#CF0063\" />\n                  )\n                }\n              ></IconButton>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n      </Flex>\n      <Button alignSelf={'center'} type=\"submit\" variant=\"pinkButton\">\n        Sign up\n      </Button>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm';\nimport { Heading, Text, Box } from '@chakra-ui/react';\n\nconst RegisterPage = () => (\n  <Box w={['300px', '440px', '750px', '970px', '1200px']} mx=\"auto\" pt=\"60px\">\n    <Heading position={'relative'} zIndex='1000' as={'h2'} textAlign={'center'} mb={'25px'} color={'#613975'}>\n      Ready to get started?\n    </Heading>\n    <Text\n      textAlign={'center'}\n      mb={'65px'}\n      color={'#6B6B6B'}\n      fontSize={['16px', '16px', '18px', '20px', '22px']}\n    >\n      Fill in your contact information and become a happy phonebook user!\n    </Text>\n    <RegisterForm />\n  </Box>\n);\n\nexport default RegisterPage;\n","import {\n  createToastFn\n} from \"./chunk-RANSABEB.mjs\";\n\n// src/use-toast.tsx\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction useToast(defaultOptions) {\n  const { theme } = useChakra();\n  return useMemo(\n    () => createToastFn(theme.direction, defaultOptions),\n    [defaultOptions, theme.direction]\n  );\n}\nvar use_toast_default = useToast;\n\nexport {\n  useToast,\n  use_toast_default\n};\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","show","setShow","handleClick","dispatch","useDispatch","toast","useToast","handleInputChange","e","target","value","as","flexDirection","gap","bgGradient","bgColor","borderRadius","p","mx","mb","w","position","zIndex","onSubmit","preventDefault","elements","passwordRepeat","title","description","status","duration","isClosable","reset","registerUser","align","isRequired","color","I","type","onChange","placeholder","_placeholder","fontSize","variant","pr","width","h","size","onClick","icon","alignSelf","pt","textAlign","defaultOptions","theme","useChakra","useMemo","createToastFn","direction"],"sourceRoot":""}